import { icons } from "./utils/utils.js";
import api from "./utils/api.js";

window.baseurl = 'http://localhost/SistemaCRM/';
window.icons = await icons();
window.idusuario = document.getElementById('idUsuario')?.value || null;
window.savedContent = new Map();

window.getIcon = (name, color = null, size = null) => {
    const svgString = window.icons[name];
    if (!svgString) return 'â€¢';

    // Convertir string a nodo SVG
    const parser = new DOMParser();
    const doc = parser.parseFromString(svgString, "image/svg+xml");
    const svgElement = doc.documentElement;

    // Cambiar color si se pasÃ³
    if (color) {
        svgElement.querySelectorAll("path").forEach(path => {
            path.style.stroke = color;
        });
    }

    if (size) {
        svgElement.setAttribute('style', `width: ${size}px !important; height: ${size}px !important;`)
    }

    return svgElement.outerHTML;
};

function previewImage(event) {
    const input = event.target;
    const file = input.files[0];

    if (file) {
        const reader = new FileReader();
        reader.onload = function (e) {
            const img = document.getElementById('prev-image');
            img.src = e.target.result;
            img.style.display = 'block'; // Mostrar la imagen
        };
        reader.readAsDataURL(file);
    }
}

document.addEventListener('change', function (e) {
    if (e.target.closest('#fileInput')) {
        previewImage(e);
    }
});

document.addEventListener('click', function (e) {
    if (e.target.closest('.sidebar-item')) {
        window.location.href = `${e.target.closest('.sidebar-item').dataset.url}`;
    }
    if (e.target.closest('.user-icon') || e.target.closest('.user-link')) {
        const element = e.target.closest('.user-icon') || e.target.closest('.user-link');
        const tipo = element?.dataset?.type;
        const id = element?.dataset?.id;
        if (!element || !tipo || !id) return;

        if (tipo == 'usuario') {
            window.location.href = window.baseurl + `index.php?p=usuarios/get&id=${id}`;
        }
        if (tipo == 'cliente') {
            window.location.href = window.baseurl + `index.php?p=clientes/get&id=${id}`;
        }
    }
    /*
    if (e.target.closest('.input-busqueda')) {
        const input = e.target.closest('.input-busqueda');
        const resultadosContainer = document.querySelector(`.resultados-busqueda[data-parent="${input.id}"]`);

        if (!input || !resultadosContainer) return;
        resultadosContainer.style.display = 'flex';
    }
        */
    if (e.target.closest('.busqueda-grupo')) {
        const resultados = e.target.closest('.busqueda-grupo').querySelector('.resultados-busqueda');
        if (!resultados || resultados.classList.contains('disable-auto')) return;

        document.querySelectorAll('.resultados-busqueda').forEach(el => el.style.display = 'none');
        resultados.style.display = "flex";
    }
    if (e.target.closest('.resultado-item')) {
        const container = e.target.closest('.resultados-busqueda');
        if (!container || container.classList.contains('disable-auto')) return;

        const input = document.getElementById(container?.dataset?.parent);
        const value = e.target.closest('.resultado-item').dataset?.value;
        if (!value || !input) return;

        input.value = value;
        container.style.display = "none";
    }
    /*
    if (e.target.closest('.btn-hide-element')) {
        
        const btn = e.target.closest('.btn-hide-element');
        const elements = btn?.dataset?.elements?.split(',');
        if (!btn || !elements) return;

        const parent = btn.dataset?.parent;

        if (parent) {
            elements.forEach(selector => {
                const element = btn.closest(parent).querySelector(selector);
                if (element) element.style.display = "none";
            });
        } else {
            elements.forEach(selector => {
                const element = document.querySelector(selector);
                if (element) element.style.display = "none";
            });
        }    
    }
        */
    if (e.target.closest('.edicion-grupo')) {
        const grupo = e.target.closest('.edicion-grupo');
        const row = grupo.querySelector(".row-editable");
        const ds = row?.dataset;

        if (
            grupo.classList.contains("editing") ||
            !ds?.element || !ds?.campo || !ds?.id || !ds?.source || !ds?.action
        ) return;

        grupo.classList.add("selected", "editing");

        const element = row.querySelector(`[id="${ds.element}"]`);
        const campo = JSON.parse(ds.campo);

        // Guardar nodo original (no solo HTML)
        window.savedContent.set(element.id, {
            node: element.cloneNode(true),
            ...campo
        });

        const buttons = `
        <div class="d-flex align-items-center justify-content-end gap-2">
            <button type="button" class="btn btn-sm btn-cancelar">Cancelar</button>
            <button type="button" class="btn btn-sm btn-actualizar">Actualizar</button>
        </div>`;

        // Generador de inputs segÃºn tipo de campo
        const inputHTML = {
            texto: () =>
                `<input type="text" id="${element.id}" class="form-control" 
                name="${campo.campo}" value="${element.textContent.trim()}">`,

            numero: () =>
                `<input type="number" id="${element.id}" class="form-control" 
                name="${campo.campo}" value="${Number(element.textContent.trim())}">`,

            booleano: () =>
                `<select class="form-select w-auto" id="${element.id}" name="${campo.campo}">
                <option value="1" ${element.textContent.trim() === "SÃ­" ? "selected" : ""}>SÃ­</option>
                <option value="0" ${element.textContent.trim() === "No" ? "selected" : ""}>No</option>
            </select>`,

            fecha: () =>
                `<input type="date" class="form-control" id="${element.id}" 
                name="${campo.campo}" value="${element.textContent.trim()}">`,

            opciones: () =>
                `<select class="form-select" id="${element.id}" name="${campo.campo}">
                ${campo.valor_inicial
                    .map(
                        opcion =>
                            `<option value="${opcion}" ${element.textContent.trim() === opcion ? "selected" : ""}>${opcion}</option>`
                    )
                    .join("")}
            </select>`
        };

        // Reemplazar el nodo original
        element.outerHTML = `<div class="d-flex flex-column w-100 gap-2">
        ${inputHTML[campo.tipo_dato] ? inputHTML[campo.tipo_dato]() : ""}
        ${buttons}
    </div>`;

        // Reasignar referencia al nuevo input
        const inputEl = row.querySelector(`[id="${ds.element}"]`);

        // Cancelar â†’ restaurar nodo original
        row.querySelector(".btn-cancelar").addEventListener("click", () => {
            const original = window.savedContent.get(inputEl.id).node;
            inputEl.closest(".d-flex.flex-column").replaceWith(original);
            grupo.classList.remove("selected", "editing");
        });

        // Actualizar â†’ enviar datos y restaurar
        row.querySelector(".btn-actualizar").addEventListener("click", () => {
            const newContent = inputEl.value;
            const formData = new FormData();

            formData.append("id", ds.id);
            formData.append(campo.campo, newContent);

            api.post({
                source: ds.source,
                action: ds.action,
                data: formData,
                onSuccess: () => {
                    const original = window.savedContent.get(inputEl.id).node;

                    // ðŸ‘‡ Mostrar SÃ­/No si es booleano
                    if (campo.tipo_dato === "booleano") {
                        original.textContent = newContent === "1" ? "SÃ­" : "No";
                    } else if (campo.tipo_dato === "fecha") {
                        // Opcional: formatear fecha (ej. yyyy-mm-dd -> dd/mm/yyyy)
                        const d = new Date(newContent);
                        original.textContent = !isNaN(d)
                            ? d.toLocaleDateString("es-ES")
                            : newContent || "(VacÃ­o)";
                    } else {
                        original.textContent = newContent || "(VacÃ­o)";
                    }

                    inputEl.closest(".d-flex.flex-column").replaceWith(original);
                    grupo.classList.remove("selected", "editing");
                    document.dispatchEvent(new Event("entidadActualizada"));
                }
            });
        });
    }
    if (!e.target.closest('.menu-button')) {
        document.querySelectorAll('.menu-submenu').forEach(el => el.style.display = 'none');
    }
    if (!e.target.closest('.busqueda-grupo')) {
        document.querySelectorAll('.resultados-busqueda').forEach(el => el.style.display = 'none');
    }
});

document.addEventListener("show.bs.modal", function (event) {
    const openModals = document.querySelectorAll(".modal.show");
    if (openModals.length > 0) {
        const zIndex = 1050 + (10 * openModals.length); // base 1050, sumamos por cada modal abierto
        const modal = event.target;
        modal.style.zIndex = zIndex;

        // Ajustar el backdrop tambiÃ©n
        setTimeout(() => {
            const backdrops = document.querySelectorAll(".modal-backdrop");
            backdrops[backdrops.length - 1].style.zIndex = zIndex - 1;
        });
    }
});